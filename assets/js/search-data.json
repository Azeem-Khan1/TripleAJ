{
  
    
        "post0": {
            "title": "3.9 and 3.11 Lesson",
            "content": "First Things First: WGET . wget allows you to essentially clone someone elses file on Github into a directory of your choosing You are able to edit your own copy of the file without affecting the original | . | . Here&#39;s a quick how-to . Open your VSCode terminal (Terminal &gt; New Terminal) . | Navigate to your Fastpages Blog using cd . | Navigate to the _notebooks directory in your Fastpages . | Copy and paste this into the terminal: wget https://raw.githubusercontent.com/Azeem-Khan1/TripleAJ/master/_notebooks/2022-12-06-lessonComplete.ipynb . | You&#39;re all set! you can use this copy of our notebook to help you take notes and participate during the lesson . Please raise your hand if you are having trouble with wget and we will come around and help you | . | Note: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn&#39;t work, try just c and v with no ctl or cmd) | . 3.9 Developing Algorithms . Lesson . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson created by Akshat P. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use dto solve the same problem. . | . Example 1 | What happens if we test it with 54 degrees? . Record what your outputs are when you enter 54 and then 95, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . Example 2 | What happens if we test 95 degrees? . Record what your outputs are when you enter 54 and then 95, does the algorithm yield the same result this time? . The condition below is not nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside?&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . WRITE HERE . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt;= 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 36 . Second block . sum = 0 counter = 9 #iteration while (counter &lt; 1): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter - 2 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 0 . Flowcharts (START OF AZEEM&#39;S SECTION) . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement (See Example B) | . | determine a way to reach the end goal | Selection vs. Iteration . Example A . Consider this situation: You are shopping for your favorite food at your favorite supermarket | You see that there is a sale on wheat products for 35% off | There is another sale on produce for 20% off | Tax on all items is 8% | Your TASK: calculate the cost of your favorite item using an algorithm! (start out with a flowchart) | . | . Example A Possible Solution (using a flowchart) . Example B .",
            "url": "https://azeem-khan1.github.io/TripleAJ/Lesson",
            "relUrl": "/Lesson",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "3.9 Lesson 3",
            "content": "Week 9 Lesson 3 Developing Algorithms . “What Will we Learn in this Lesson?” . For Algorithms How to combine and/or modify an existing algorithm. | . | Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd); . display(“choose value for x”) . x &lt;- input() . if(n mod2 = 0) . { Display (“n is even”) } . ELSE . { Display (“n is odd”) } . how can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . adding steps 2 and 3 from the original equation | . display(“choose value for x”) . x &lt;- input() . if(x mod 2 = 0) { x &lt;- n/2 # right here } ELSE { x &lt;- n * 3 + 1 . # and here } . Step 2 . step/rule 4; here we add the loop | . display(“choose value for x”) . x &lt;- input() Repeat until (n=1) # Right here { if(x mod 2 = 0) { x &lt;- n/2 } ELSE { x &lt;- n * 3 + 1 } } . Final Step/Step 3 . Displaying all numbers in the sequence | . display(“choose value for x”) . x &lt;- input() Display(x) Repeat until (n=1) { if(x mod 2 = 0) { x &lt;- n/2 } ELSE { x &lt;- n * 3 + 1 } Display(n) } . Takeaways . You can use code you’ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the “collatz conjecture.” and explain your steps in a post on a blog. | .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9/Lesson3",
            "relUrl": "/3-9/Lesson3",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "3.9 Lesson 1",
            "content": "Lesson . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson created by Akshat P. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use dto solve the same problem. . | . EXAMPLE #1 - Too Hot, too cold, or just right? . What similarities do you notice about the two algorithms? . If the boolean expressions are the same, does that mean the results will be the same? . . So right here, the condition on the left is nested, the condition on the right is not nested. . You have to be careful, even if they look the same, they might not yield the same result. . What happens if we assign 54 to our algorithm? . When we alter and set limitations to our code, the algorithm would not work if we were to input a variable that does not satisfy the rules for the algorithm. . . What happens if we assign 95 to our algorithm? . Since 95 is greater than 90, it is true, however else is also to be considered, and so this satisfied the conditionals (we learned this a week ago). Since 95 is also greater than or equal to 65, the algorithm satisfies. . Therefore both situations DO NOT yield the same results. . This is a simple overview on how algorithms work along with conditionals. . . Conditionals vs Booleans .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9Lesson1",
            "relUrl": "/3-9Lesson1",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "3.9 Lesson 2",
            "content": "Lesson created by Azeem Khan . Lesson Overview . Focused on creating or developing algorithms using a flowchart or natural language | An algorithm can contain selection or iteration Either way, they need to be sequenced properly in order to have the intended result | . | . How to set up a Flowchart . A Flowchart can help you visualize the functionality of an algorithm | Step 1: label the start point | Step 2: consider the first question you want the algorithm to ask | Step 3: write what you want the algorithm to do if the answer to that question is true | Step 4: repeat step 3, but this time, if the answer is false | Step 5: write out all necessary steps for the algorithm to function properly | Step 6: determine a way to reach the end goal | . Selection vs. Iteration . Example A . Consider this situation: You are shopping for your favorite food at your favorite supermarket | You see that there is a sale on wheat products for 35% off | There is another sale on produce for 20% off | Tax on all items is 8% | Your TASK: calculate the cost of your favorite item using an algorithm! (start out with a flowchart) | . | . Example A Possible Solution (using a flowchart) . . Example B .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9/Lesson2",
            "relUrl": "/3-9/Lesson2",
            "date": " • Nov 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "3.9 Part 1 - Developing Algorithms",
            "content": "Lesson Overview/Plan . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . For the lesson, we are going to take detailed notes for the entire three videos and from those notes, we are going to try to make the lesson as applicable as possible, and so we are thinking of potentially making a video with our own API and algorithm or explaining other APIs that have similar algorithms, this would be innovative. . Some ideas: . Blackjack | Flip a coin | 8 Ball | . Notes . Objective . Compare multiple algorithms to determine if they yield the same side effect or result. .",
            "url": "https://azeem-khan1.github.io/TripleAJ/3-9Lesson1",
            "relUrl": "/3-9Lesson1",
            "date": " • Nov 17, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About This Site",
          "content": "About this site . This is a group site for TripleAJ in Mr. Mortensen’s period 3 Computer Science Principles course (Trimester 2). . Created by Azeem Khan, Ahad, Josh Williams, and Akshat. .",
          "url": "https://azeem-khan1.github.io/TripleAJ/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://azeem-khan1.github.io/TripleAJ/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}